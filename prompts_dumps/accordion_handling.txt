To replace the existing accordion structure with instances of the TextInputsCompareNew and ExplainedTextInput components, you can follow these steps:

1. First, create instances of the components in your JavaScript code:

```javascript
const textInputsCompareNewInstance = new TextInputsCompareNew({
  textInput1ContainerId: 'text-input-1',
  textInput2ContainerId: 'text-input-2',
  explainedTextInputContainerId: 'explained-text-input',
  explainedTextInputSidebarContainerId: 'explained-text-input-sidebar',
  explainedTextInputSidebarContentId: 'explained-text-input-sidebar-content',
});

const explainedTextInputInstance = new ExplainedTextInput({
  textInputId: 'explained-text-input',
  sidebarOptions: {
    containerId: 'explained-text-input-sidebar',
    sidebarContentId: 'explained-text-input-sidebar-content',
  },
});
```

2. Modify the HTML structure to include the components:

```html
<div class="accordion-heading" id="tab1-header">
  <span class="rotated-content">
    <i class="fas fa-balance-scale"></i>&nbsp;Texts
  </span>
</div>
<div class="accordion-content" id="tab1">
  <div id="text-inputs-compare-new-container"></div>
</div>

<div class="accordion-heading" id="tab2-header">
  <span class="rotated-content">
    <i class="fas fa-pencil-alt"></i>&nbsp;Explained Text
  </span>
</div>
<div class="accordion-content" id="tab2">
  <div id="explained-text-input-container"></div>
</div>
```

3. Append the instances to the corresponding containers in the HTML:

```javascript
document.getElementById('text-inputs-compare-new-container').appendChild(textInputsCompareNewInstance.container);
document.getElementById('explained-text-input-container').appendChild(explainedTextInputInstance.container);
```

Here's the complete code:

```javascript
const textInputsCompareNewInstance = new TextInputsCompareNew({
  textInput1ContainerId: 'text-input-1',
  textInput2ContainerId: 'text-input-2',
  explainedTextInputContainerId: 'explained-text-input',
  explainedTextInputSidebarContainerId: 'explained-text-input-sidebar',
  explainedTextInputSidebarContentId: 'explained-text-input-sidebar-content',
});

const explainedTextInputInstance = new ExplainedTextInput({
  textInputId: 'explained-text-input',
  sidebarOptions: {
    containerId: 'explained-text-input-sidebar',
    sidebarContentId: 'explained-text-input-sidebar-content',
  },
});

document.getElementById('text-inputs-compare-new-container').appendChild(textInputsCompareNewInstance.container);
document.getElementById('explained-text-input-container').appendChild(explainedTextInputInstance.container);
```

```html
<div class="accordion-heading" id="tab1-header">
  <span class="rotated-content">
    <i class="fas fa-balance-scale"></i>&nbsp;Texts
  </span>
</div>
<div class="accordion-content" id="tab1">
  <div id="text-inputs-compare-new-container"></div>
</div>

<div class="accordion-heading" id="tab2-header">
  <span class="rotated-content">
    <i class="fas fa-pencil-alt"></i>&nbsp;Explained Text
  </span>
</div>
<div class="accordion-content" id="tab2">
  <div id="explained-text-input-container"></div>
</div>
```

This will replace the existing accordion structure with instances of the TextInputsCompareNew and ExplainedTextInput components when the app is loaded.

You should place the JavaScript code inside a `DOMContentLoaded` event listener to ensure that the DOM is fully loaded before executing the code. Here's the updated JavaScript code:

```javascript
document.addEventListener('DOMContentLoaded', () => {
  const textInputsCompareNewInstance = new TextInputsCompareNew({
    textInput1ContainerId: 'text-input-1',
    textInput2ContainerId: 'text-input-2',
    explainedTextInputContainerId: 'explained-text-input',
    explainedTextInputSidebarContainerId: 'explained-text-input-sidebar',
    explainedTextInputSidebarContentId: 'explained-text-input-sidebar-content',
  });

  const explainedTextInputInstance = new ExplainedTextInput({
    textInputId: 'explained-text-input',
    sidebarOptions: {
      containerId: 'explained-text-input-sidebar',
      sidebarContentId: 'explained-text-input-sidebar-content',
    },
  });

  document.getElementById('text-inputs-compare-new-container').appendChild(textInputsCompareNewInstance.container);
  document.getElementById('explained-text-input-container').appendChild(explainedTextInputInstance.container);
});
```

This will ensure that the instances of the TextInputsCompareNew and ExplainedTextInput components are appended to the corresponding containers in the HTML after the DOM is fully loaded.