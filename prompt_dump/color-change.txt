  let selectedRanges = [];
  let isCmdKeyDown = false;

  // Create a temporary highlight class
  const tempHighlightClassName = "temp-highlight";
  const tempHighlightStyle = document.createElement("style");
  tempHighlightStyle.textContent = `.${tempHighlightClassName} { background-color: rgba(0, 0, 0, 0.1); }`;
  document.head.appendChild(tempHighlightStyle);
  const tempHighlightClassApplier = rangy.createClassApplier(tempHighlightClassName, { normalize: true });  

const showColorPopup = (event) => {
    if (document.querySelector(".color-popup")) {
      return;
    }
    const popup = document.createElement("div");
    popup.classList.add("color-popup");
    popup.style.top = `${event.pageY}px`;
    popup.style.left = `${event.pageX}px`;

    const colorInputWrapper = document.createElement("div");
    colorInputWrapper.classList.add("color-input-wrapper");
    popup.appendChild(colorInputWrapper);

    const colorInput = document.createElement("input");
    colorInput.type = "color";
    colorInput.classList.add("color-input");
    colorInputWrapper.appendChild(colorInput);



    // Create the color options
    const colors = ["#E8DFF5", "#BED6DC", "#F3E2CE", "#F4EADE", "#D9DECB", "#FCE8E1", "#B2DCF3"];
    colors.forEach((color) => {
      const colorOption = document.createElement("button");
      colorOption.classList.add("color-option");
      colorOption.style.backgroundColor = color;
      colorOption.addEventListener("click", () => applyColor(color));
      popup.appendChild(colorOption);
    });
    const colorOptionStyle = document.createElement("style");
    colorOptionStyle.textContent = `
  .color-popup {
    display: flex;
    flex-wrap: wrap;
    gap: 5px; /* Add space between the color options */
    padding: 5px;
  }
  .color-option {
    width: 20px; /* Set the width of the color option circle */
    height: 20px; /* Set the height of the color option circle */
    border-radius: 50%; /* Make the color option a circle */
    border: none; 
    cursor: pointer; /* Change the cursor to a pointer when hovering over the color option */
    outline: none; /* Remove the default focus outline */
    margin: 5px; /* Add space between the color options */
  }
  .color-option:hover {
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1); /* Add a subtle shadow when hovering over the color option */
  }
`;
    document.head.appendChild(colorOptionStyle);

    // Add a strikethrough option
    const strikethroughOption = document.createElement("button");
    strikethroughOption.classList.add("strikethrough-option");
    strikethroughOption.addEventListener("click", () => applyStrikethrough(selectedRanges));

    const strikethroughIcon = document.createElement('i');
    strikethroughIcon.classList.add('fas', 'fa-strikethrough', 'icon', 'line-color', 'fa-2x');

    strikethroughOption.appendChild(strikethroughIcon);
    popup.appendChild(strikethroughOption);

    const strikethroughOptionStyle = document.createElement("style");
    strikethroughOptionStyle.textContent = `
  .strikethrough-option {
    background: none;
    border: none;
    position: relative;
    font-size: 12px;
    padding: 0;
    cursor: pointer;
  }
  .icon {
    width: 20px;
    height: 20px;
  }
    .strikethrough-option:hover {
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1); /* Add a subtle shadow when hovering over the color option */
  }
`;

    document.head.appendChild(strikethroughOptionStyle);
    document.body.appendChild(popup);

    colorInput.addEventListener("change", () => applyColor(colorInput.value));

    const handleClose = () => {
      handleColorPopupClosing();
      document.removeEventListener("mousedown", handleClickOutside);
    };

    const handleClickOutside = (e) => {
      if (!popup.contains(e.target)) {
        handleClose();
      }
    };

    setTimeout(() => {
      document.addEventListener("mousedown", handleClickOutside);
    }, 0);
  };

  const applyColor = (color) => {
    const className = `color-highlight-${color.replace("#", "").toLowerCase()}`;
    const style = document.createElement("style");
    style.textContent = `
    .${className} {
      background-color: ${color};
      border-radius: 3px;
      padding: 1px 1px;
    }
  `;
    document.head.appendChild(style);

    const classApplier = rangy.createClassApplier(className, { normalize: true });

    selectedRanges.forEach((range) => {
      // Remove the temporary highlight
      tempHighlightClassApplier.undoToRange(range);

      // Apply the new color highlight
      classApplier.toggleRange(range);
    });

    // Update the sidebar with color indexes
    updateSidebar(color);

    // Clear the selectedRanges array and close the color popup
    selectedRanges = [];
    handleColorPopupClosing();
  };

  const closeColorPopup = () => {
    document.querySelectorAll(".color-popup").forEach((popup) => popup.remove());
  };

  // Add a new function to handle color popup closing
  const handleColorPopupClosing = () => {
    closeColorPopup();

    // Remove temporary highlights
    selectedRanges.forEach((range) => {
      tempHighlightClassApplier.undoToRange(range);
    });

    // Clear the selected ranges
    selectedRanges = [];
  };

  textInput.addEventListener("mouseup", (event) => {
    const selection = rangy.getSelection();
    if (selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      if (!range.collapsed) {
        selectedRanges.push(range);
        tempHighlightClassApplier.toggleRange(range);
        selection.removeAllRanges();

        if (selectedRanges.length === 1 || isCmdKeyDown) {
          showColorPopup(event);
        }
      }
    }
  });

  const strikethroughClassName = "strikethrough";
  const strikethroughStyle = document.createElement("style");
  strikethroughStyle.textContent = `.${strikethroughClassName} { text-decoration: line-through; }`;
  document.head.appendChild(strikethroughStyle);
  const strikethroughClassApplier = rangy.createClassApplier(strikethroughClassName, { normalize: true });

  const applyStrikethrough = (selectedRanges,containerid) => {
    // Generate a unique random color for the strikethrough line
    const color = getUniqueRandomColor(containerid);

    // Create a new CSS class for the strikethrough effect
    const className = `strikethrough-${color.replace('#', '').toLowerCase()}`;
    const style = document.createElement('style');
    style.textContent = `
    .${className} {
      color: lightgrey;
      font-style: italic;
      text-decoration: line-through ${color} solid;
    }
  `;
    document.head.appendChild(style);

    const classApplier = rangy.createClassApplier(className, { normalize: true });

    selectedRanges.forEach((range) => {
      // Remove the temporary highlight
      tempHighlightClassApplier.undoToRange(range);

      // Apply the new strikethrough effect
      classApplier.toggleRange(range);
    });

    // Update the sidebar with the new strikethrough color index
    updateSidebar(color, true);

    // Clear the selectedRanges array and close the color popup
    selectedRanges = [];
    handleColorPopupClosing();
  };



how do i convert this code to use pickr library and simplify highlighting? is there a third party library that can handle the whole picking color and highlighting thing instead of this?. remember i also need the strikethrough option added as before. also, ideally i would prefer an option to be able to select text to collapse such that it creates a clickable three dots which when clicked expands to show the selected content, but is otherwise hidden. i no longer need the ability to select multiple non-continuous text at once.

---------------------

To use the Pickr library and simplify highlighting, you can follow these steps:

1. Include the Pickr library in your HTML file:

```html
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css" />
<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr"></script>
```

2. Replace the `showColorPopup` function with the following code to create a Pickr instance:

```javascript
const showColorPopup = (event) => {
  if (document.querySelector(".pickr")) {
    return;
  }

  const pickr = Pickr.create({
    el: ".color-picker",
    theme: "classic",
    default: "rgba(0, 0, 0, 0.1)",
    swatches: [
      "#E8DFF5",
      "#BED6DC",
      "#F3E2CE",
      "#F4EADE",
      "#D9DECB",
      "#FCE8E1",
      "#B2DCF3",
    ],
    components: {
      preview: true,
      opacity: false,
      hue: true,
      interaction: {
        hex: false,
        rgba: false,
        hsla: false,
        hsva: false,
        cmyk: false,
        input: true,
        clear: false,
        save: true,
      },
    },
  });

  pickr.on("save", (color) => {
    applyColor(color.toHEXA().toString());
    pickr.hide();
  });

  pickr.on("hide", () => {
    handleColorPopupClosing();
    pickr.destroyAndRemove();
  });

  pickr.show();
};
```

3. Add a new div with the class "color-picker" in your HTML file:

```html
<div class="color-picker"></div>
```

4. Remove the `colorInput` event listener and the `handleClickOutside` function, as they are no longer needed.

5. To add the strikethrough option, you can create a button and add an event listener to it. Add the following code inside the `showColorPopup` function, after creating the Pickr instance:

```javascript
const strikethroughButton = document.createElement("button");
strikethroughButton.textContent = "Strikethrough";
strikethroughButton.addEventListener("click", () => {
  applyStrikethrough(selectedRanges);
  pickr.hide();
});
document.body.appendChild(strikethroughButton);
```

6. Remove the code related to selecting multiple non-continuous text, as it is no longer needed.

As for the option to collapse selected text and create a clickable three dots, you can use the following code:

1. Add a new function called `applyCollapse`:

```javascript
const applyCollapse = (selectedRanges) => {
  selectedRanges.forEach((range) => {
    const span = document.createElement("span");
    span.classList.add("collapsed-text");
    span.style.display = "none";
    range.surroundContents(span);

    const dots = document.createElement("span");
    dots.classList.add("expand-dots");
    dots.textContent = "...";
    dots.style.cursor = "pointer";
    dots.addEventListener("click", () => {
      span.style.display = "";
      dots.remove();
    });

    range.insertNode(dots);
  });

  // Clear the selectedRanges array and close the color popup
  selectedRanges = [];
  handleColorPopupClosing();
};
```

2. Add a new button for collapsing text inside the `showColorPopup` function, after creating the strikethrough button:

```javascript
const collapseButton = document.createElement("button");
collapseButton.textContent = "Collapse";
collapseButton.addEventListener("click", () => {
  applyCollapse(selectedRanges);
  pickr.hide();
});
document.body.appendChild(collapseButton);
```

Now, you should have a simplified highlighting system using the Pickr library, with added strikethrough and collapse options.