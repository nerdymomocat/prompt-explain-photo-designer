    <div class="modal" id="comparisonModal">
      <div class="text-comparison-container">
        <div class="text-area-container">
          <textarea class="text-area" id="tb1-text-area-1" placeholder="Original Text"></textarea>
          <textarea class="text-area" id="tb1-text-area-2" placeholder="New Text"></textarea>
        </div>
        <div class="output-container">
          <button id="tb1-compare-btn" class="compare-btn"> <i class="fas fa-balance-scale"></i>&nbsp;Compare</button>
          <div id="results-container">
            <div class="diff-results" id="tb1-diff-results" data-placeholder="Comparison Output Will Appear Here">
            </div>
          </div>
          <button id="tb1-copy-to-designer-btn" class="copy-to-designer-btn"> <i class="fas fa-copy"></i>&nbsp;Copy
            to Designer</button>
        </div>
      </div>
    </div>

<div class="overlay-button-input-container">
                 <div class="compare-btn-container">
    <button id="tb3-compare-btn" class="compare-btn-int">
      <i class="fas fa-balance-scale"></i>
    </button>
  </div>
                <div class="text-input-tab3-wrapper">
                  <div class="text-input-tab3" id="text-input-1" contenteditable="true" spellcheck="false"
                    data-placeholder="Add Prompt Here"></div>
                </div>
              </div>  <div id="sidebar-1-tab3" class="sidebar">

 const copyToDesignerBtn = document.querySelector("#tb1-copy-to-designer-btn");

  copyToDesignerBtn.addEventListener("click", copyToDesigner);


  function copyToDesigner(sidebar_container_id) {
    console.log('copyToDesigner called');
    removeAllItemsFromSidebar(sidebar_container_id);

    // Get the input text
    const diffResults = document.getElementById('tb1-diff-results');
    if (diffResults.textContent.trim() === '') {
      diffResults.setAttribute('data-placeholder', 'Comparison Output Will Appear Here');
    }
    const inputText = diffResults.innerHTML;

    // Create a temporary DOM element to parse the input text
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = inputText;

    // Handle <del> elements
    const delElements = tempDiv.querySelectorAll("del");
    delElements.forEach((delElement) => {
      const selectedRange = rangy.createRange();
      selectedRange.selectNodeContents(delElement);
      applyStrikethrough([selectedRange]);
    });

    // Handle <ins> elements
    const insElements = tempDiv.querySelectorAll("ins");
    insElements.forEach((insElement) => {
      const selectedRange = rangy.createRange();
      selectedRange.selectNodeContents(insElement);
      const randomColor = getUniqueRandomColor();
      applyColorWithRanges(randomColor, [selectedRange]);
    });

    // Unwrap <del> elements
    delElements.forEach((delElement) => {
      const parent = delElement.parentNode;
      while (delElement.firstChild) {
        parent.insertBefore(delElement.firstChild, delElement);
      }
      parent.removeChild(delElement);
    });

    // Unwrap <ins> elements
    insElements.forEach((insElement) => {
      const parent = insElement.parentNode;
      while (insElement.firstChild) {
        parent.insertBefore(insElement.firstChild, insElement);
      }
      parent.removeChild(insElement);
    });

    // Add the formatted text to the text-input area in the next collapsible
    const outputTextArea = document.querySelector(".text-input");
    outputTextArea.innerHTML = tempDiv.innerHTML;
  }

  const compareButton = document.querySelector("#tb1-compare-btn");
  compareButton.addEventListener("click", compareTextAreas);

  function compareTextAreas() {
    console.log('compareTextAreas called'); // Debugging line

    const textArea1 = document.getElementById('tb1-text-area-1');
    const textArea2 = document.getElementById('tb1-text-area-2');
    const diffResults = document.getElementById('tb1-diff-results');
    const resultsContainer = document.getElementById('results-container'); // Add this line

    const diffs = wordDiff(textArea1.value, textArea2.value);

    console.log('Diffs:', diffs); // Debugging line

    const diffHTML = diffs
      .map(([op, text]) => {
        if (op === -1) return `<del>${text}</del>`;
        if (op === 1) return `<ins>${text}</ins>`;
        return text;
      })
      .join(' ');

    diffResults.innerHTML = diffHTML;
  }




i want the comparisonModal to open up as a modal. then when i click copy to designer, it should call the copyToDesigner function but instead of output in document.querySelector(".text-input"); it should output to the text input in the overlay-button-input-container where the compare-btn-int element is, and i need to pass the relevant sidebar component id to the function too. i can pass the related textinput to the function too. but remember this function is being called from a modal popup, so somehow this popup needs to have the value when opened? how do i do that? the modal should close if someone presses escape or clicks outside the modal. 




To achieve this, you can follow these steps:

1. Add an event listener to open the comparisonModal when the compare-btn-int button is clicked.
2. Store the related text input and sidebar component id in data attributes of the compare-btn-int button.
3. Pass the stored values to the copyToDesigner function when the button is clicked.
4. Modify the copyToDesigner function to accept the text input and sidebar component id as arguments.
5. Add event listeners to close the modal when the user clicks outside the modal or presses the escape key.

Here's the modified code:

HTML:

```html
<button id="tb3-compare-btn" class="compare-btn-int" data-related-text-input="#text-input-1" data-sidebar-container-id="#sidebar-1-tab3">
  <i class="fas fa-balance-scale"></i>
</button>
```

JavaScript:

```javascript
// Add event listener to open the comparisonModal
const compareBtnInt = document.querySelector("#tb3-compare-btn");
compareBtnInt.addEventListener("click", openComparisonModal);

function openComparisonModal() {
  const comparisonModal = document.querySelector("#comparisonModal");
  comparisonModal.style.display = "block";
}

// Add event listener to close the modal when clicking outside
window.addEventListener("click", (event) => {
  const comparisonModal = document.querySelector("#comparisonModal");
  if (event.target === comparisonModal) {
    comparisonModal.style.display = "none";
  }
});

// Add event listener to close the modal when pressing the escape key
window.addEventListener("keydown", (event) => {
  const comparisonModal = document.querySelector("#comparisonModal");
  if (event.key === "Escape") {
    comparisonModal.style.display = "none";
  }
});

// Modify the copyToDesigner function
function copyToDesigner() {
  const relatedTextInput = document.querySelector(compareBtnInt.dataset.relatedTextInput);
  const sidebarContainerId = compareBtnInt.dataset.sidebarContainerId;

  // Rest of the function implementation
  // Replace the outputTextArea selector with the relatedTextInput
  relatedTextInput.innerHTML = tempDiv.innerHTML;
}
```

Now, when you click the compare-btn-int button, the comparisonModal will open. When you click the "Copy to Designer" button, the output will be added to the related text input in the overlay-button-input-container, and the sidebar component id will be passed to the function. The modal will close if the user presses the escape key or clicks outside the modal.